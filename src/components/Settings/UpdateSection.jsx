import React, { useState, useEffect } from 'react';
import Button from '../common/Button';

const UpdateSection = () => {
  const [updateStatus, setUpdateStatus] = useState({
    currentVersion: '1.0.0',
    checking: false,
    available: false,
    updateInfo: null,
    error: null
  });

  const [config, setConfig] = useState({
    autoCheck: true,
    autoDownload: false,
    autoInstall: false,
    allowPrerelease: false
  });

  const [githubToken, setGithubToken] = useState('');
  const [tokenStatus, setTokenStatus] = useState({ valid: null, checking: false });
  const [showTokenInput, setShowTokenInput] = useState(false);

  useEffect(() => {
    loadInitialData();
  }, []);

  const loadInitialData = async () => {
    try {
      // Load current status and config
      const [status, currentConfig] = await Promise.all([
        window.api.updateApi.getUpdateStatus(),
        window.api.updateApi.getConfig()
      ]);

      setUpdateStatus(prev => ({
        ...prev,
        currentVersion: status.currentVersion,
        available: status.updateInfo?.available || false,
        updateInfo: status.updateInfo
      }));

      setConfig(currentConfig);
    } catch (error) {
      console.error('Failed to load update data:', error);
    }
  };

  const handleCheckForUpdates = async () => {
    setUpdateStatus(prev => ({ ...prev, checking: true, error: null }));
    
    try {
      const updateInfo = await window.api.updateApi.checkForUpdates();
      setUpdateStatus(prev => ({
        ...prev,
        checking: false,
        available: updateInfo.available,
        updateInfo
      }));
    } catch (error) {
      setUpdateStatus(prev => ({
        ...prev,
        checking: false,
        error: error.message
      }));
    }
  };

  const handleConfigChange = async (key, value) => {
    const newConfig = { ...config, [key]: value };
    setConfig(newConfig);
    
    try {
      await window.api.updateApi.setConfig(newConfig);
    } catch {
      console.error('Failed to save config');
      // Revert on error
      setConfig(config);
    }
  };

  const handleTokenValidation = async () => {
    if (!githubToken.trim()) {
      setTokenStatus({ valid: false, checking: false });
      return;
    }

    setTokenStatus({ valid: null, checking: true });
    
    try {
      const result = await window.api.updateApi.validateGitHubToken(githubToken);
      setTokenStatus({ valid: result.valid, checking: false });
      
      if (result.valid) {
        await window.api.updateApi.setGitHubToken(githubToken);
      }
    } catch {
      setTokenStatus({ valid: false, checking: false });
    }
  };

  const handleTestConnection = async () => {
    try {
      const result = await window.api.updateApi.checkGitHubConnection();
      if (result.connected) {
        alert(`‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ GitHub ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\nRate Limit: ${result.rateLimit.remaining}/${result.rateLimit.limit}`);
      } else {
        alert(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ GitHub ‡πÑ‡∏î‡πâ: ${result.error}`);
      }
    } catch (error) {
      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
    }
  };

  const formatDate = (dateString) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString('th-TH', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  return (
    <div style={{ marginTop: '24px' }}>
      <h3 style={{ marginBottom: '16px', color: '#333' }}>‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô</h3>
      
      {/* Current Version & Check */}
      <div style={{
        backgroundColor: '#f8f9fa',
        padding: '16px',
        borderRadius: '8px',
        marginBottom: '16px'
      }}>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '12px' }}>
          <div>
            <div style={{ fontSize: '14px', color: '#666' }}>‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</div>
            <div style={{ fontSize: '18px', fontWeight: 'bold', color: '#333' }}>
              v{updateStatus.currentVersion}
            </div>
          </div>
          <Button
            onClick={handleCheckForUpdates}
            disabled={updateStatus.checking}
            style={{ minWidth: '120px' }}
          >
            {updateStatus.checking ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö...' : '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï'}
          </Button>
        </div>

        {updateStatus.available && updateStatus.updateInfo && (
          <div style={{
            backgroundColor: '#e8f5e8',
            border: '1px solid #4CAF50',
            padding: '12px',
            borderRadius: '4px',
            marginTop: '12px'
          }}>
            <div style={{ fontWeight: 'bold', color: '#2e7d32', marginBottom: '4px' }}>
              üéâ ‡∏°‡∏µ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!
            </div>
            <div style={{ fontSize: '14px', color: '#333' }}>
              ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô {updateStatus.updateInfo.latestVersion}
            </div>
            {updateStatus.updateInfo.publishedAt && (
              <div style={{ fontSize: '12px', color: '#666' }}>
                ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà: {formatDate(updateStatus.updateInfo.publishedAt)}
              </div>
            )}
          </div>
        )}

        {updateStatus.error && (
          <div style={{
            backgroundColor: '#ffebee',
            border: '1px solid #f44336',
            padding: '12px',
            borderRadius: '4px',
            marginTop: '12px',
            color: '#c62828',
            fontSize: '14px'
          }}>
            ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {updateStatus.error}
          </div>
        )}
      </div>

      {/* Update Configuration */}
      <div style={{
        backgroundColor: '#f8f9fa',
        padding: '16px',
        borderRadius: '8px',
        marginBottom: '16px'
      }}>
        <h4 style={{ margin: '0 0 12px 0', color: '#333' }}>‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï</h4>
        
        <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
          <label style={{ display: 'flex', alignItems: 'center', fontSize: '14px' }}>
            <input
              type="checkbox"
              checked={config.autoCheck}
              onChange={(e) => handleConfigChange('autoCheck', e.target.checked)}
              style={{ marginRight: '8px' }}
            />
            ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
          </label>
          
          <label style={{ display: 'flex', alignItems: 'center', fontSize: '14px' }}>
            <input
              type="checkbox"
              checked={config.autoDownload}
              onChange={(e) => handleConfigChange('autoDownload', e.target.checked)}
              style={{ marginRight: '8px' }}
            />
            ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
          </label>
          
          <label style={{ display: 'flex', alignItems: 'center', fontSize: '14px' }}>
            <input
              type="checkbox"
              checked={config.autoInstall}
              onChange={(e) => handleConfigChange('autoInstall', e.target.checked)}
              style={{ marginRight: '8px' }}
            />
            ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
          </label>
          
          <label style={{ display: 'flex', alignItems: 'center', fontSize: '14px' }}>
            <input
              type="checkbox"
              checked={config.allowPrerelease}
              onChange={(e) => handleConfigChange('allowPrerelease', e.target.checked)}
              style={{ marginRight: '8px' }}
            />
            ‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö (Pre-release)
          </label>
        </div>
      </div>

      {/* GitHub Token Configuration */}
      <div style={{
        backgroundColor: '#f8f9fa',
        padding: '16px',
        borderRadius: '8px',
        marginBottom: '16px'
      }}>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '12px' }}>
          <h4 style={{ margin: 0, color: '#333' }}>‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GitHub Token</h4>
          <Button
            onClick={() => setShowTokenInput(!showTokenInput)}
            style={{ fontSize: '12px', padding: '4px 8px' }}
          >
            {showTokenInput ? '‡∏ã‡πà‡∏≠‡∏ô' : '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤'}
          </Button>
        </div>
        
        <div style={{ fontSize: '12px', color: '#666', marginBottom: '8px' }}>
          ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Private Repository
        </div>

        {showTokenInput && (
          <div style={{ marginTop: '12px' }}>
            <div style={{ display: 'flex', gap: '8px', marginBottom: '8px' }}>
              <input
                type="password"
                value={githubToken}
                onChange={(e) => setGithubToken(e.target.value)}
                placeholder="ghp_xxxxxxxxxxxxxxxxxxxx"
                style={{
                  flex: 1,
                  padding: '8px',
                  border: '1px solid #ddd',
                  borderRadius: '4px',
                  fontSize: '14px'
                }}
              />
              <Button
                onClick={handleTokenValidation}
                disabled={tokenStatus.checking}
                style={{ minWidth: '80px' }}
              >
                {tokenStatus.checking ? '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö...' : '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö'}
              </Button>
            </div>
            
            {tokenStatus.valid !== null && (
              <div style={{
                padding: '8px',
                borderRadius: '4px',
                fontSize: '12px',
                backgroundColor: tokenStatus.valid ? '#e8f5e8' : '#ffebee',
                color: tokenStatus.valid ? '#2e7d32' : '#c62828',
                border: `1px solid ${tokenStatus.valid ? '#4CAF50' : '#f44336'}`
              }}>
                {tokenStatus.valid ? '‚úì Token ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ' : '‚úó Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á'}
              </div>
            )}
          </div>
        )}
      </div>

      {/* Database & System Info */}
      <div style={{
        backgroundColor: '#f8f9fa',
        padding: '16px',
        borderRadius: '8px'
      }}>
        <h4 style={{ margin: '0 0 12px 0', color: '#333' }}>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö</h4>
        
        <div style={{ display: 'flex', gap: '8px', flexWrap: 'wrap' }}>
          <Button
            onClick={handleTestConnection}
            style={{ fontSize: '12px', padding: '6px 12px' }}
          >
            ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ GitHub
          </Button>
          
          <Button
            onClick={async () => {
              try {
                const result = await window.api.updateApi.validateDatabase();
                alert(result.valid ? '‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏Å‡∏ï‡∏¥' : `‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ${result.error || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏'}`);
              } catch (error) {
                alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
              }
            }}
            style={{ fontSize: '12px', padding: '6px 12px' }}
          >
            ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          </Button>
          
          <Button
            onClick={async () => {
              try {
                const result = await window.api.updateApi.createDatabaseBackup();
                alert(`‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${result.backupPath}`);
              } catch (error) {
                alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
              }
            }}
            style={{ fontSize: '12px', padding: '6px 12px' }}
          >
            ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          </Button>
          
          <Button
            onClick={async () => {
              try {
                const version = await window.api.updateApi.getCurrentSchemaVersion();
                alert(`‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${version}`);
              } catch (error) {
                alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
              }
            }}
            style={{ fontSize: '12px', padding: '6px 12px' }}
          >
            ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          </Button>
        </div>
      </div>
    </div>
  );
};

export default UpdateSection;